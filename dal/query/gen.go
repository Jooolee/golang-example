// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q              = new(Query)
	GenTable       *genTable
	GenTableColumn *genTableColumn
	SysConfig      *sysConfig
	SysDept        *sysDept
	SysDictDatum   *sysDictDatum
	SysDictType    *sysDictType
	SysJob         *sysJob
	SysJobLog      *sysJobLog
	SysLogininfor  *sysLogininfor
	SysMenu        *sysMenu
	SysNotice      *sysNotice
	SysOperLog     *sysOperLog
	TZxuser        *tZxuser
	User           *user
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	GenTable = &Q.GenTable
	GenTableColumn = &Q.GenTableColumn
	SysConfig = &Q.SysConfig
	SysDept = &Q.SysDept
	SysDictDatum = &Q.SysDictDatum
	SysDictType = &Q.SysDictType
	SysJob = &Q.SysJob
	SysJobLog = &Q.SysJobLog
	SysLogininfor = &Q.SysLogininfor
	SysMenu = &Q.SysMenu
	SysNotice = &Q.SysNotice
	SysOperLog = &Q.SysOperLog
	TZxuser = &Q.TZxuser
	User = &Q.User
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:             db,
		GenTable:       newGenTable(db, opts...),
		GenTableColumn: newGenTableColumn(db, opts...),
		SysConfig:      newSysConfig(db, opts...),
		SysDept:        newSysDept(db, opts...),
		SysDictDatum:   newSysDictDatum(db, opts...),
		SysDictType:    newSysDictType(db, opts...),
		SysJob:         newSysJob(db, opts...),
		SysJobLog:      newSysJobLog(db, opts...),
		SysLogininfor:  newSysLogininfor(db, opts...),
		SysMenu:        newSysMenu(db, opts...),
		SysNotice:      newSysNotice(db, opts...),
		SysOperLog:     newSysOperLog(db, opts...),
		TZxuser:        newTZxuser(db, opts...),
		User:           newUser(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	GenTable       genTable
	GenTableColumn genTableColumn
	SysConfig      sysConfig
	SysDept        sysDept
	SysDictDatum   sysDictDatum
	SysDictType    sysDictType
	SysJob         sysJob
	SysJobLog      sysJobLog
	SysLogininfor  sysLogininfor
	SysMenu        sysMenu
	SysNotice      sysNotice
	SysOperLog     sysOperLog
	TZxuser        tZxuser
	User           user
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:             db,
		GenTable:       q.GenTable.clone(db),
		GenTableColumn: q.GenTableColumn.clone(db),
		SysConfig:      q.SysConfig.clone(db),
		SysDept:        q.SysDept.clone(db),
		SysDictDatum:   q.SysDictDatum.clone(db),
		SysDictType:    q.SysDictType.clone(db),
		SysJob:         q.SysJob.clone(db),
		SysJobLog:      q.SysJobLog.clone(db),
		SysLogininfor:  q.SysLogininfor.clone(db),
		SysMenu:        q.SysMenu.clone(db),
		SysNotice:      q.SysNotice.clone(db),
		SysOperLog:     q.SysOperLog.clone(db),
		TZxuser:        q.TZxuser.clone(db),
		User:           q.User.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:             db,
		GenTable:       q.GenTable.replaceDB(db),
		GenTableColumn: q.GenTableColumn.replaceDB(db),
		SysConfig:      q.SysConfig.replaceDB(db),
		SysDept:        q.SysDept.replaceDB(db),
		SysDictDatum:   q.SysDictDatum.replaceDB(db),
		SysDictType:    q.SysDictType.replaceDB(db),
		SysJob:         q.SysJob.replaceDB(db),
		SysJobLog:      q.SysJobLog.replaceDB(db),
		SysLogininfor:  q.SysLogininfor.replaceDB(db),
		SysMenu:        q.SysMenu.replaceDB(db),
		SysNotice:      q.SysNotice.replaceDB(db),
		SysOperLog:     q.SysOperLog.replaceDB(db),
		TZxuser:        q.TZxuser.replaceDB(db),
		User:           q.User.replaceDB(db),
	}
}

type queryCtx struct {
	GenTable       IGenTableDo
	GenTableColumn IGenTableColumnDo
	SysConfig      ISysConfigDo
	SysDept        ISysDeptDo
	SysDictDatum   ISysDictDatumDo
	SysDictType    ISysDictTypeDo
	SysJob         ISysJobDo
	SysJobLog      ISysJobLogDo
	SysLogininfor  ISysLogininforDo
	SysMenu        ISysMenuDo
	SysNotice      ISysNoticeDo
	SysOperLog     ISysOperLogDo
	TZxuser        ITZxuserDo
	User           IUserDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		GenTable:       q.GenTable.WithContext(ctx),
		GenTableColumn: q.GenTableColumn.WithContext(ctx),
		SysConfig:      q.SysConfig.WithContext(ctx),
		SysDept:        q.SysDept.WithContext(ctx),
		SysDictDatum:   q.SysDictDatum.WithContext(ctx),
		SysDictType:    q.SysDictType.WithContext(ctx),
		SysJob:         q.SysJob.WithContext(ctx),
		SysJobLog:      q.SysJobLog.WithContext(ctx),
		SysLogininfor:  q.SysLogininfor.WithContext(ctx),
		SysMenu:        q.SysMenu.WithContext(ctx),
		SysNotice:      q.SysNotice.WithContext(ctx),
		SysOperLog:     q.SysOperLog.WithContext(ctx),
		TZxuser:        q.TZxuser.WithContext(ctx),
		User:           q.User.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
